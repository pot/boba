// Generated by jextract

package dev.weisz.boba.c.linux.x64;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct winsize {
 *     unsigned short ws_row;
 *     unsigned short ws_col;
 *     unsigned short ws_xpixel;
 *     unsigned short ws_ypixel;
 * }
 * }
 */
public class winsize {

    winsize() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ioctl_h.C_SHORT.withName("ws_row"),
        ioctl_h.C_SHORT.withName("ws_col"),
        ioctl_h.C_SHORT.withName("ws_xpixel"),
        ioctl_h.C_SHORT.withName("ws_ypixel")
    ).withName("winsize");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort ws_row$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ws_row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short ws_row
     * }
     */
    public static final OfShort ws_row$layout() {
        return ws_row$LAYOUT;
    }

    private static final long ws_row$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short ws_row
     * }
     */
    public static final long ws_row$offset() {
        return ws_row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short ws_row
     * }
     */
    public static short ws_row(MemorySegment struct) {
        return struct.get(ws_row$LAYOUT, ws_row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short ws_row
     * }
     */
    public static void ws_row(MemorySegment struct, short fieldValue) {
        struct.set(ws_row$LAYOUT, ws_row$OFFSET, fieldValue);
    }

    private static final OfShort ws_col$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ws_col"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short ws_col
     * }
     */
    public static final OfShort ws_col$layout() {
        return ws_col$LAYOUT;
    }

    private static final long ws_col$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short ws_col
     * }
     */
    public static final long ws_col$offset() {
        return ws_col$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short ws_col
     * }
     */
    public static short ws_col(MemorySegment struct) {
        return struct.get(ws_col$LAYOUT, ws_col$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short ws_col
     * }
     */
    public static void ws_col(MemorySegment struct, short fieldValue) {
        struct.set(ws_col$LAYOUT, ws_col$OFFSET, fieldValue);
    }

    private static final OfShort ws_xpixel$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ws_xpixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short ws_xpixel
     * }
     */
    public static final OfShort ws_xpixel$layout() {
        return ws_xpixel$LAYOUT;
    }

    private static final long ws_xpixel$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short ws_xpixel
     * }
     */
    public static final long ws_xpixel$offset() {
        return ws_xpixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short ws_xpixel
     * }
     */
    public static short ws_xpixel(MemorySegment struct) {
        return struct.get(ws_xpixel$LAYOUT, ws_xpixel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short ws_xpixel
     * }
     */
    public static void ws_xpixel(MemorySegment struct, short fieldValue) {
        struct.set(ws_xpixel$LAYOUT, ws_xpixel$OFFSET, fieldValue);
    }

    private static final OfShort ws_ypixel$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ws_ypixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short ws_ypixel
     * }
     */
    public static final OfShort ws_ypixel$layout() {
        return ws_ypixel$LAYOUT;
    }

    private static final long ws_ypixel$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short ws_ypixel
     * }
     */
    public static final long ws_ypixel$offset() {
        return ws_ypixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short ws_ypixel
     * }
     */
    public static short ws_ypixel(MemorySegment struct) {
        return struct.get(ws_ypixel$LAYOUT, ws_ypixel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short ws_ypixel
     * }
     */
    public static void ws_ypixel(MemorySegment struct, short fieldValue) {
        struct.set(ws_ypixel$LAYOUT, ws_ypixel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

